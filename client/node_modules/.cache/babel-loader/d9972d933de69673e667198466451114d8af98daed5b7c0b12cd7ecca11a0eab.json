{"ast":null,"code":"var _jsxFileName = \"E:\\\\EchoesofCulture\\\\client\\\\src\\\\pages\\\\Languages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport LanguageCard from \"../components/LanguageCard\";\nimport \"../styles/Languages.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguagesPage = () => {\n  _s();\n  const [languages, setLanguages] = useState([]); // Store the list of languages\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Store the search query\n\n  useEffect(() => {\n    // Fetch the languages from the SimpleLocalize API\n    const fetchLanguages = async () => {\n      try {\n        const response = await fetch(\"https://api.simplelocalize.io/api/v1/languages\", {\n          method: \"GET\",\n          headers: {\n            \"X-SimpleLocalize-Token\": \"<API_KEY>\",\n            // Replace <API_KEY> with your actual API key\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const responseData = await response.json();\n        if (responseData.status === 200 && Array.isArray(responseData.data)) {\n          // Map the API response to match the structure expected by the component\n          const formattedLanguages = responseData.data.map(language => ({\n            name: language.key,\n            // Use `key` for name\n            description: language.description // Use `description` directly\n          }));\n          setLanguages(formattedLanguages);\n        } else {\n          console.error(\"Unexpected API response:\", responseData);\n          setLanguages([]); // Set languages to an empty array on error\n        }\n      } catch (error) {\n        console.error(\"Error fetching languages:\", error);\n        setLanguages([]); // Set languages to an empty array on error\n      }\n    };\n    fetchLanguages();\n  }, []);\n\n  // Filter languages based on the search query\n  const filteredLanguages = Array.isArray(languages) ? languages.filter(language => language.name.toLowerCase().includes(searchQuery.toLowerCase())) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"languages-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Languages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"search-bar\",\n      placeholder: \"Search languages...\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"languages-grid\",\n      children: filteredLanguages.length > 0 ? filteredLanguages.map((language, index) => /*#__PURE__*/_jsxDEV(LanguageCard, {\n        language: language\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No languages found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguagesPage, \"dxYkGbtJ2XClBLyy35XD7B8lTGg=\");\n_c = LanguagesPage;\nexport default LanguagesPage;\nvar _c;\n$RefreshReg$(_c, \"LanguagesPage\");","map":{"version":3,"names":["React","useState","useEffect","LanguageCard","jsxDEV","_jsxDEV","LanguagesPage","_s","languages","setLanguages","searchQuery","setSearchQuery","fetchLanguages","response","fetch","method","headers","responseData","json","status","Array","isArray","data","formattedLanguages","map","language","name","key","description","console","error","filteredLanguages","filter","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","length","index","_c","$RefreshReg$"],"sources":["E:/EchoesofCulture/client/src/pages/Languages.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport LanguageCard from \"../components/LanguageCard\";\r\nimport \"../styles/Languages.css\";\r\n\r\nconst LanguagesPage = () => {\r\n  const [languages, setLanguages] = useState([]); // Store the list of languages\r\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Store the search query\r\n\r\n  useEffect(() => {\r\n    // Fetch the languages from the SimpleLocalize API\r\n    const fetchLanguages = async () => {\r\n      try {\r\n        const response = await fetch(\"https://api.simplelocalize.io/api/v1/languages\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"X-SimpleLocalize-Token\": \"<API_KEY>\", // Replace <API_KEY> with your actual API key\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n\r\n        const responseData = await response.json();\r\n        if (responseData.status === 200 && Array.isArray(responseData.data)) {\r\n          // Map the API response to match the structure expected by the component\r\n          const formattedLanguages = responseData.data.map((language) => ({\r\n            name: language.key, // Use `key` for name\r\n            description: language.description, // Use `description` directly\r\n          }));\r\n          setLanguages(formattedLanguages);\r\n        } else {\r\n          console.error(\"Unexpected API response:\", responseData);\r\n          setLanguages([]); // Set languages to an empty array on error\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching languages:\", error);\r\n        setLanguages([]); // Set languages to an empty array on error\r\n      }\r\n    };\r\n    fetchLanguages();\r\n  }, []);\r\n\r\n  // Filter languages based on the search query\r\n  const filteredLanguages = Array.isArray(languages)\r\n    ? languages.filter((language) =>\r\n        language.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n      )\r\n    : [];\r\n\r\n  return (\r\n    <div className=\"languages-page\">\r\n      <h1>Languages</h1>\r\n      <input\r\n        type=\"text\"\r\n        className=\"search-bar\"\r\n        placeholder=\"Search languages...\"\r\n        value={searchQuery}\r\n        onChange={(e) => setSearchQuery(e.target.value)}\r\n      />\r\n      <div className=\"languages-grid\">\r\n        {filteredLanguages.length > 0 ? (\r\n          filteredLanguages.map((language, index) => (\r\n            <LanguageCard key={index} language={language} />\r\n          ))\r\n        ) : (\r\n          <p>No languages found.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LanguagesPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}