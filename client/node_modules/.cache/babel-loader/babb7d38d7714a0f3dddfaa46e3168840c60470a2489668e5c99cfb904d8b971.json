{"ast":null,"code":"var _jsxFileName = \"E:\\\\EchoesofCulture\\\\client\\\\src\\\\pages\\\\Tribes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Tribes.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tribes = ({\n  onAdd\n}) => {\n  _s();\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [location, setLocation] = useState('');\n  const [customs, setCustoms] = useState('');\n  const [language_ids, setLanguage] = useState('');\n  //const [created_at, setDate] = useState(''); // To display success/error messages\n  const [message, setMessage] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate if the species already exists\n    try {\n      const checkResponse = await fetch(`http://localhost:5000/Tribe_API/species/check?name=${encodeURIComponent(name)}`);\n      console.log(checkResponse);\n      if (checkResponse.ok) {\n        const exists = await checkResponse.json();\n        console.log(exists);\n        if (exists.exists) {\n          setMessage('Tribe already exists. Please add a different species.');\n          return; // Exit if species already exists\n        } else {\n          // Species does not exist, proceed to add it\n\n          try {\n            const payload = {\n              name,\n              description,\n              location,\n              customs,\n              language_ids\n            }; //, created_at \n            const response = await fetch('http://localhost:5000/Tribe_API/species', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(payload)\n            });\n            console.log(response);\n            if (response.ok) {\n              const data = await response.json();\n              setMessage('Tribe added successfully!');\n              onAdd(data); // Optionally, update parent state\n            } else {\n              const errorText = await response.text(); // Capture server error message if available\n              setMessage(`Failed to add Tribe. Server returned: ${errorText}`);\n            }\n          } catch (error) {\n            console.error('Error adding Tribe:', error);\n            setMessage('An error occurred while adding the Tribe.');\n          }\n\n          // Reset form fields after successful submission\n          setName('');\n          setDescription('');\n          setLocation('');\n          setCustoms('');\n          setLanguage('');\n          // setDate('');\n        }\n      } else {\n        const errorText = await checkResponse.text(); // Capture server error message if available\n        setMessage(`Failed to validate Tribe. Server returned: ${errorText}`);\n        return;\n      }\n    } catch (error) {\n      console.error('Error validating species:', error);\n      setMessage('An error occurred during validation.');\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-species-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a New Tribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"add-species-form\",\n      encType: \"multipart/form-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Tribe Name\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Location\",\n        value: location,\n        onChange: e => setLocation(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Customs\",\n        value: customs,\n        onChange: e => setCustoms(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \" Tribe language\",\n        value: language_ids,\n        onChange: e => setLanguage(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Species\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Tribes, \"mkQk2de+gz5NWfp7D7+KKLaLpsA=\");\n_c = Tribes;\nexport default Tribes;\n/* <div className=\"tribes-container\">\r\n      <h1>Tribes</h1>\r\n      <ul>\r\n        {tribes.map((tribe) => (\r\n          <li key={tribe.id}>\r\n            <h2>{tribe.name}</h2>\r\n            <p>{tribe.description}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n    <input\r\n          type=\"date\"\r\n          value={created_at}\r\n          onChange={(e) => setDate(e.target.value)}  // Capture the URL instead of file\r\n          placeholder=\"Enter image URL\"\r\n          required\r\n        />*/\nvar _c;\n$RefreshReg$(_c, \"Tribes\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Tribes","onAdd","_s","name","setName","description","setDescription","location","setLocation","customs","setCustoms","language_ids","setLanguage","message","setMessage","handleSubmit","e","preventDefault","checkResponse","fetch","encodeURIComponent","console","log","ok","exists","json","payload","response","method","headers","body","JSON","stringify","data","errorText","text","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","encType","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["E:/EchoesofCulture/client/src/pages/Tribes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Tribes.css';\r\n\r\nconst Tribes = ({ onAdd }) => {\r\n  const [name, setName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [location, setLocation] = useState('');\r\n  const [customs, setCustoms] = useState('');\r\n  const [language_ids, setLanguage] = useState('');\r\n  //const [created_at, setDate] = useState(''); // To display success/error messages\r\n  const [message, setMessage] = useState(''); \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    // Validate if the species already exists\r\n    try {\r\n      const checkResponse = await fetch(`http://localhost:5000/Tribe_API/species/check?name=${encodeURIComponent(name)}`);\r\n      console.log(checkResponse);\r\n      if (checkResponse.ok) {\r\n        const exists = await checkResponse.json();\r\n        console.log(exists);\r\n        if (exists.exists) {\r\n          setMessage('Tribe already exists. Please add a different species.');\r\n          return;  // Exit if species already exists\r\n        } else {\r\n          // Species does not exist, proceed to add it\r\n     \r\n          try {\r\n            const payload = { name, description, location,customs, language_ids};//, created_at \r\nconst response = await fetch('http://localhost:5000/Tribe_API/species', {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  body: JSON.stringify(payload),\r\n});\r\n\r\n           \r\n            console.log(response);\r\n            if (response.ok) {\r\n              const data = await response.json();\r\n              setMessage('Tribe added successfully!');\r\n              onAdd(data); // Optionally, update parent state\r\n            } else {\r\n              const errorText = await response.text(); // Capture server error message if available\r\n              setMessage(`Failed to add Tribe. Server returned: ${errorText}`);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error adding Tribe:', error);\r\n            setMessage('An error occurred while adding the Tribe.');\r\n          }\r\n  \r\n          // Reset form fields after successful submission\r\n          setName('');\r\n          setDescription('');\r\n          setLocation('');\r\n          setCustoms('');\r\n          setLanguage('');\r\n         // setDate('');\r\n        }\r\n      } else {\r\n        const errorText = await checkResponse.text(); // Capture server error message if available\r\n        setMessage(`Failed to validate Tribe. Server returned: ${errorText}`);\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error validating species:', error);\r\n      setMessage('An error occurred during validation.');\r\n      return;\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"add-species-form-container\">\r\n      <h2>Add a New Tribe</h2>\r\n      <form onSubmit={handleSubmit} className=\"add-species-form\" encType=\"multipart/form-data\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Tribe Name\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Description\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Location\"\r\n          value={location}\r\n          onChange={(e) => setLocation(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"Customs\"\r\n          value={customs}\r\n          onChange={(e) => setCustoms(e.target.value)}\r\n          required\r\n        ></textarea>\r\n        <input\r\n            type=\"text\"\r\n            placeholder=\" Tribe language\"\r\n            value={language_ids}\r\n            onChange={(e) => setLanguage(e.target.value)}\r\n            required\r\n        />\r\n\r\n        \r\n        \r\n\r\n        <button type=\"submit\">Add Species</button>\r\n      </form>\r\n      {message && <p>{message}</p>}\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tribes;\r\n/* <div className=\"tribes-container\">\r\n      <h1>Tribes</h1>\r\n      <ul>\r\n        {tribes.map((tribe) => (\r\n          <li key={tribe.id}>\r\n            <h2>{tribe.name}</h2>\r\n            <p>{tribe.description}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n    <input\r\n          type=\"date\"\r\n          value={created_at}\r\n          onChange={(e) => setDate(e.target.value)}  // Capture the URL instead of file\r\n          placeholder=\"Enter image URL\"\r\n          required\r\n        />*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,YAAY,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMmB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI;MACF,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAC,sDAAsDC,kBAAkB,CAACjB,IAAI,CAAC,EAAE,CAAC;MACnHkB,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;MAC1B,IAAIA,aAAa,CAACK,EAAE,EAAE;QACpB,MAAMC,MAAM,GAAG,MAAMN,aAAa,CAACO,IAAI,CAAC,CAAC;QACzCJ,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;QACnB,IAAIA,MAAM,CAACA,MAAM,EAAE;UACjBV,UAAU,CAAC,uDAAuD,CAAC;UACnE,OAAO,CAAE;QACX,CAAC,MAAM;UACL;;UAEA,IAAI;YACF,MAAMY,OAAO,GAAG;cAAEvB,IAAI;cAAEE,WAAW;cAAEE,QAAQ;cAACE,OAAO;cAAEE;YAAY,CAAC,CAAC;YACjF,MAAMgB,QAAQ,GAAG,MAAMR,KAAK,CAAC,yCAAyC,EAAE;cACtES,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACP,cAAc,EAAE;cAClB,CAAC;cACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO;YAC9B,CAAC,CAAC;YAGUL,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;YACrB,IAAIA,QAAQ,CAACJ,EAAE,EAAE;cACf,MAAMU,IAAI,GAAG,MAAMN,QAAQ,CAACF,IAAI,CAAC,CAAC;cAClCX,UAAU,CAAC,2BAA2B,CAAC;cACvCb,KAAK,CAACgC,IAAI,CAAC,CAAC,CAAC;YACf,CAAC,MAAM;cACL,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;cACzCrB,UAAU,CAAC,yCAAyCoB,SAAS,EAAE,CAAC;YAClE;UACF,CAAC,CAAC,OAAOE,KAAK,EAAE;YACdf,OAAO,CAACe,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;YAC3CtB,UAAU,CAAC,2CAA2C,CAAC;UACzD;;UAEA;UACAV,OAAO,CAAC,EAAE,CAAC;UACXE,cAAc,CAAC,EAAE,CAAC;UAClBE,WAAW,CAAC,EAAE,CAAC;UACfE,UAAU,CAAC,EAAE,CAAC;UACdE,WAAW,CAAC,EAAE,CAAC;UAChB;QACD;MACF,CAAC,MAAM;QACL,MAAMsB,SAAS,GAAG,MAAMhB,aAAa,CAACiB,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9CrB,UAAU,CAAC,8CAA8CoB,SAAS,EAAE,CAAC;QACrE;MACF;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDtB,UAAU,CAAC,sCAAsC,CAAC;MAClD;IACF;EACF,CAAC;EAGD,oBACEf,OAAA;IAAKsC,SAAS,EAAC,4BAA4B;IAAAC,QAAA,gBACzCvC,OAAA;MAAAuC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB3C,OAAA;MAAM4C,QAAQ,EAAE5B,YAAa;MAACsB,SAAS,EAAC,kBAAkB;MAACO,OAAO,EAAC,qBAAqB;MAAAN,QAAA,gBACtFvC,OAAA;QACE8C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,YAAY;QACxBC,KAAK,EAAE5C,IAAK;QACZ6C,QAAQ,EAAGhC,CAAC,IAAKZ,OAAO,CAACY,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;QACzCG,QAAQ;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF3C,OAAA;QACE8C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,aAAa;QACzBC,KAAK,EAAE1C,WAAY;QACnB2C,QAAQ,EAAGhC,CAAC,IAAKV,cAAc,CAACU,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;QAChDG,QAAQ;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF3C,OAAA;QACE8C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,UAAU;QACtBC,KAAK,EAAExC,QAAS;QAChByC,QAAQ,EAAGhC,CAAC,IAAKR,WAAW,CAACQ,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;QAC7CG,QAAQ;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF3C,OAAA;QACE+C,WAAW,EAAC,SAAS;QACrBC,KAAK,EAAEtC,OAAQ;QACfuC,QAAQ,EAAGhC,CAAC,IAAKN,UAAU,CAACM,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;QAC5CG,QAAQ;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACZ3C,OAAA;QACI8C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,iBAAiB;QAC7BC,KAAK,EAAEpC,YAAa;QACpBqC,QAAQ,EAAGhC,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;QAC7CG,QAAQ;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC,eAKF3C,OAAA;QAAQ8C,IAAI,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,EACN7B,OAAO,iBAAId,OAAA;MAAAuC,QAAA,EAAIzB;IAAO;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEzB,CAAC;AAEV,CAAC;AAACxC,EAAA,CAtHIF,MAAM;AAAAmD,EAAA,GAANnD,MAAM;AAwHZ,eAAeA,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}